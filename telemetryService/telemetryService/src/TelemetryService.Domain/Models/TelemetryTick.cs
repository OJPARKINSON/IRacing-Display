// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: telemetryTick.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TelemetryService.Domain.Models {

  /// <summary>Holder for reflection information generated from telemetryTick.proto</summary>
  public static partial class TelemetryTickReflection {

    #region Descriptor
    /// <summary>File descriptor for telemetryTick.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TelemetryTickReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN0ZWxlbWV0cnlUaWNrLnByb3RvEgZwdWJTdWIaH2dvb2dsZS9wcm90b2J1",
            "Zi90aW1lc3RhbXAucHJvdG8ipgcKCVRlbGVtZXRyeRIOCgZsYXBfaWQYASAB",
            "KAkSDQoFc3BlZWQYAiABKAESFAoMbGFwX2Rpc3RfcGN0GAMgASgBEhIKCnNl",
            "c3Npb25faWQYBCABKAkSEwoLc2Vzc2lvbl9udW0YBSABKAkSFAoMc2Vzc2lv",
            "bl90eXBlGAYgASgJEhQKDHNlc3Npb25fbmFtZRgHIAEoCRIUCgxzZXNzaW9u",
            "X3RpbWUYCCABKAESDgoGY2FyX2lkGAkgASgJEhIKCnRyYWNrX25hbWUYCiAB",
            "KAkSEAoIdHJhY2tfaWQYCyABKAkSEQoJd29ya2VyX2lkGAwgASgNEhwKFHN0",
            "ZWVyaW5nX3doZWVsX2FuZ2xlGA0gASgBEhsKE3BsYXllcl9jYXJfcG9zaXRp",
            "b24YDiABKAESEgoKdmVsb2NpdHlfeBgPIAEoARISCgp2ZWxvY2l0eV95GBAg",
            "ASgBEhIKCnZlbG9jaXR5X3oYESABKAESEgoKZnVlbF9sZXZlbBgSIAEoARIQ",
            "Cgh0aHJvdHRsZRgTIAEoARINCgVicmFrZRgUIAEoARILCgNycG0YFSABKAES",
            "CwoDbGF0GBYgASgBEgsKA2xvbhgXIAEoARIMCgRnZWFyGBggASgNEgsKA2Fs",
            "dBgZIAEoARIRCglsYXRfYWNjZWwYGiABKAESEgoKbG9uZ19hY2NlbBgbIAEo",
            "ARISCgp2ZXJ0X2FjY2VsGBwgASgBEg0KBXBpdGNoGB0gASgBEgwKBHJvbGwY",
            "HiABKAESCwoDeWF3GB8gASgBEhEKCXlhd19ub3J0aBggIAEoARIPCgd2b2x0",
            "YWdlGCEgASgBEhkKEWxhcF9sYXN0X2xhcF90aW1lGCIgASgBEhIKCndhdGVy",
            "X3RlbXAYIyABKAESHQoVbGFwX2RlbHRhX3RvX2Jlc3RfbGFwGCQgASgBEhwK",
            "FGxhcF9jdXJyZW50X2xhcF90aW1lGCUgASgBEhMKC2xfZnByZXNzdXJlGCYg",
            "ASgBEhMKC3JfZnByZXNzdXJlGCcgASgBEhMKC2xfcnByZXNzdXJlGCggASgB",
            "EhMKC3JfcnByZXNzdXJlGCkgASgBEhEKCWxfZnRlbXBfbRgqIAEoARIRCgly",
            "X2Z0ZW1wX20YKyABKAESEQoJbF9ydGVtcF9tGCwgASgBEhEKCXJfcnRlbXBf",
            "bRgtIAEoARItCgl0aWNrX3RpbWUYLiABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wIpwBCg5UZWxlbWV0cnlCYXRjaBIiCgdyZWNvcmRzGAEgAygL",
            "MhEucHViU3ViLlRlbGVtZXRyeRIQCghiYXRjaF9pZBgCIAEoCRISCgpzZXNz",
            "aW9uX2lkGAMgASgJEhEKCXdvcmtlcl9pZBgEIAEoDRItCgl0aW1lc3RhbXAY",
            "BSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQiGqAh5UZWxlbWV0",
            "cnlTZXJ2aWNlLkRvbWFpbi5Nb2RlbHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TelemetryService.Domain.Models.Telemetry), global::TelemetryService.Domain.Models.Telemetry.Parser, new[]{ "LapId", "Speed", "LapDistPct", "SessionId", "SessionNum", "SessionType", "SessionName", "SessionTime", "CarId", "TrackName", "TrackId", "WorkerId", "SteeringWheelAngle", "PlayerCarPosition", "VelocityX", "VelocityY", "VelocityZ", "FuelLevel", "Throttle", "Brake", "Rpm", "Lat", "Lon", "Gear", "Alt", "LatAccel", "LongAccel", "VertAccel", "Pitch", "Roll", "Yaw", "YawNorth", "Voltage", "LapLastLapTime", "WaterTemp", "LapDeltaToBestLap", "LapCurrentLapTime", "LFpressure", "RFpressure", "LRpressure", "RRpressure", "LFtempM", "RFtempM", "LRtempM", "RRtempM", "TickTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TelemetryService.Domain.Models.TelemetryBatch), global::TelemetryService.Domain.Models.TelemetryBatch.Parser, new[]{ "Records", "BatchId", "SessionId", "WorkerId", "Timestamp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Telemetry : pb::IMessage<Telemetry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Telemetry> _parser = new pb::MessageParser<Telemetry>(() => new Telemetry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Telemetry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TelemetryService.Domain.Models.TelemetryTickReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Telemetry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Telemetry(Telemetry other) : this() {
      lapId_ = other.lapId_;
      speed_ = other.speed_;
      lapDistPct_ = other.lapDistPct_;
      sessionId_ = other.sessionId_;
      sessionNum_ = other.sessionNum_;
      sessionType_ = other.sessionType_;
      sessionName_ = other.sessionName_;
      sessionTime_ = other.sessionTime_;
      carId_ = other.carId_;
      trackName_ = other.trackName_;
      trackId_ = other.trackId_;
      workerId_ = other.workerId_;
      steeringWheelAngle_ = other.steeringWheelAngle_;
      playerCarPosition_ = other.playerCarPosition_;
      velocityX_ = other.velocityX_;
      velocityY_ = other.velocityY_;
      velocityZ_ = other.velocityZ_;
      fuelLevel_ = other.fuelLevel_;
      throttle_ = other.throttle_;
      brake_ = other.brake_;
      rpm_ = other.rpm_;
      lat_ = other.lat_;
      lon_ = other.lon_;
      gear_ = other.gear_;
      alt_ = other.alt_;
      latAccel_ = other.latAccel_;
      longAccel_ = other.longAccel_;
      vertAccel_ = other.vertAccel_;
      pitch_ = other.pitch_;
      roll_ = other.roll_;
      yaw_ = other.yaw_;
      yawNorth_ = other.yawNorth_;
      voltage_ = other.voltage_;
      lapLastLapTime_ = other.lapLastLapTime_;
      waterTemp_ = other.waterTemp_;
      lapDeltaToBestLap_ = other.lapDeltaToBestLap_;
      lapCurrentLapTime_ = other.lapCurrentLapTime_;
      lFpressure_ = other.lFpressure_;
      rFpressure_ = other.rFpressure_;
      lRpressure_ = other.lRpressure_;
      rRpressure_ = other.rRpressure_;
      lFtempM_ = other.lFtempM_;
      rFtempM_ = other.rFtempM_;
      lRtempM_ = other.lRtempM_;
      rRtempM_ = other.rRtempM_;
      tickTime_ = other.tickTime_ != null ? other.tickTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Telemetry Clone() {
      return new Telemetry(this);
    }

    /// <summary>Field number for the "lap_id" field.</summary>
    public const int LapIdFieldNumber = 1;
    private string lapId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LapId {
      get { return lapId_; }
      set {
        lapId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "lap_dist_pct" field.</summary>
    public const int LapDistPctFieldNumber = 3;
    private double lapDistPct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LapDistPct {
      get { return lapDistPct_; }
      set {
        lapDistPct_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 4;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_num" field.</summary>
    public const int SessionNumFieldNumber = 5;
    private string sessionNum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SessionNum {
      get { return sessionNum_; }
      set {
        sessionNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 6;
    private string sessionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_name" field.</summary>
    public const int SessionNameFieldNumber = 7;
    private string sessionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SessionName {
      get { return sessionName_; }
      set {
        sessionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_time" field.</summary>
    public const int SessionTimeFieldNumber = 8;
    private double sessionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SessionTime {
      get { return sessionTime_; }
      set {
        sessionTime_ = value;
      }
    }

    /// <summary>Field number for the "car_id" field.</summary>
    public const int CarIdFieldNumber = 9;
    private string carId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CarId {
      get { return carId_; }
      set {
        carId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "track_name" field.</summary>
    public const int TrackNameFieldNumber = 10;
    private string trackName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TrackName {
      get { return trackName_; }
      set {
        trackName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "track_id" field.</summary>
    public const int TrackIdFieldNumber = 11;
    private string trackId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TrackId {
      get { return trackId_; }
      set {
        trackId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "worker_id" field.</summary>
    public const int WorkerIdFieldNumber = 12;
    private uint workerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WorkerId {
      get { return workerId_; }
      set {
        workerId_ = value;
      }
    }

    /// <summary>Field number for the "steering_wheel_angle" field.</summary>
    public const int SteeringWheelAngleFieldNumber = 13;
    private double steeringWheelAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SteeringWheelAngle {
      get { return steeringWheelAngle_; }
      set {
        steeringWheelAngle_ = value;
      }
    }

    /// <summary>Field number for the "player_car_position" field.</summary>
    public const int PlayerCarPositionFieldNumber = 14;
    private double playerCarPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PlayerCarPosition {
      get { return playerCarPosition_; }
      set {
        playerCarPosition_ = value;
      }
    }

    /// <summary>Field number for the "velocity_x" field.</summary>
    public const int VelocityXFieldNumber = 15;
    private double velocityX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    /// <summary>Field number for the "velocity_y" field.</summary>
    public const int VelocityYFieldNumber = 16;
    private double velocityY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    /// <summary>Field number for the "velocity_z" field.</summary>
    public const int VelocityZFieldNumber = 17;
    private double velocityZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VelocityZ {
      get { return velocityZ_; }
      set {
        velocityZ_ = value;
      }
    }

    /// <summary>Field number for the "fuel_level" field.</summary>
    public const int FuelLevelFieldNumber = 18;
    private double fuelLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FuelLevel {
      get { return fuelLevel_; }
      set {
        fuelLevel_ = value;
      }
    }

    /// <summary>Field number for the "throttle" field.</summary>
    public const int ThrottleFieldNumber = 19;
    private double throttle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Throttle {
      get { return throttle_; }
      set {
        throttle_ = value;
      }
    }

    /// <summary>Field number for the "brake" field.</summary>
    public const int BrakeFieldNumber = 20;
    private double brake_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Brake {
      get { return brake_; }
      set {
        brake_ = value;
      }
    }

    /// <summary>Field number for the "rpm" field.</summary>
    public const int RpmFieldNumber = 21;
    private double rpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Rpm {
      get { return rpm_; }
      set {
        rpm_ = value;
      }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 22;
    private double lat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lon" field.</summary>
    public const int LonFieldNumber = 23;
    private double lon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "gear" field.</summary>
    public const int GearFieldNumber = 24;
    private uint gear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gear {
      get { return gear_; }
      set {
        gear_ = value;
      }
    }

    /// <summary>Field number for the "alt" field.</summary>
    public const int AltFieldNumber = 25;
    private double alt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Alt {
      get { return alt_; }
      set {
        alt_ = value;
      }
    }

    /// <summary>Field number for the "lat_accel" field.</summary>
    public const int LatAccelFieldNumber = 26;
    private double latAccel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LatAccel {
      get { return latAccel_; }
      set {
        latAccel_ = value;
      }
    }

    /// <summary>Field number for the "long_accel" field.</summary>
    public const int LongAccelFieldNumber = 27;
    private double longAccel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LongAccel {
      get { return longAccel_; }
      set {
        longAccel_ = value;
      }
    }

    /// <summary>Field number for the "vert_accel" field.</summary>
    public const int VertAccelFieldNumber = 28;
    private double vertAccel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VertAccel {
      get { return vertAccel_; }
      set {
        vertAccel_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 29;
    private double pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 30;
    private double roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 31;
    private double yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "yaw_north" field.</summary>
    public const int YawNorthFieldNumber = 32;
    private double yawNorth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double YawNorth {
      get { return yawNorth_; }
      set {
        yawNorth_ = value;
      }
    }

    /// <summary>Field number for the "voltage" field.</summary>
    public const int VoltageFieldNumber = 33;
    private double voltage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Voltage {
      get { return voltage_; }
      set {
        voltage_ = value;
      }
    }

    /// <summary>Field number for the "lap_last_lap_time" field.</summary>
    public const int LapLastLapTimeFieldNumber = 34;
    private double lapLastLapTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LapLastLapTime {
      get { return lapLastLapTime_; }
      set {
        lapLastLapTime_ = value;
      }
    }

    /// <summary>Field number for the "water_temp" field.</summary>
    public const int WaterTempFieldNumber = 35;
    private double waterTemp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WaterTemp {
      get { return waterTemp_; }
      set {
        waterTemp_ = value;
      }
    }

    /// <summary>Field number for the "lap_delta_to_best_lap" field.</summary>
    public const int LapDeltaToBestLapFieldNumber = 36;
    private double lapDeltaToBestLap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LapDeltaToBestLap {
      get { return lapDeltaToBestLap_; }
      set {
        lapDeltaToBestLap_ = value;
      }
    }

    /// <summary>Field number for the "lap_current_lap_time" field.</summary>
    public const int LapCurrentLapTimeFieldNumber = 37;
    private double lapCurrentLapTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LapCurrentLapTime {
      get { return lapCurrentLapTime_; }
      set {
        lapCurrentLapTime_ = value;
      }
    }

    /// <summary>Field number for the "l_fpressure" field.</summary>
    public const int LFpressureFieldNumber = 38;
    private double lFpressure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LFpressure {
      get { return lFpressure_; }
      set {
        lFpressure_ = value;
      }
    }

    /// <summary>Field number for the "r_fpressure" field.</summary>
    public const int RFpressureFieldNumber = 39;
    private double rFpressure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RFpressure {
      get { return rFpressure_; }
      set {
        rFpressure_ = value;
      }
    }

    /// <summary>Field number for the "l_rpressure" field.</summary>
    public const int LRpressureFieldNumber = 40;
    private double lRpressure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LRpressure {
      get { return lRpressure_; }
      set {
        lRpressure_ = value;
      }
    }

    /// <summary>Field number for the "r_rpressure" field.</summary>
    public const int RRpressureFieldNumber = 41;
    private double rRpressure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RRpressure {
      get { return rRpressure_; }
      set {
        rRpressure_ = value;
      }
    }

    /// <summary>Field number for the "l_ftemp_m" field.</summary>
    public const int LFtempMFieldNumber = 42;
    private double lFtempM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LFtempM {
      get { return lFtempM_; }
      set {
        lFtempM_ = value;
      }
    }

    /// <summary>Field number for the "r_ftemp_m" field.</summary>
    public const int RFtempMFieldNumber = 43;
    private double rFtempM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RFtempM {
      get { return rFtempM_; }
      set {
        rFtempM_ = value;
      }
    }

    /// <summary>Field number for the "l_rtemp_m" field.</summary>
    public const int LRtempMFieldNumber = 44;
    private double lRtempM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LRtempM {
      get { return lRtempM_; }
      set {
        lRtempM_ = value;
      }
    }

    /// <summary>Field number for the "r_rtemp_m" field.</summary>
    public const int RRtempMFieldNumber = 45;
    private double rRtempM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RRtempM {
      get { return rRtempM_; }
      set {
        rRtempM_ = value;
      }
    }

    /// <summary>Field number for the "tick_time" field.</summary>
    public const int TickTimeFieldNumber = 46;
    private global::Google.Protobuf.WellKnownTypes.Timestamp tickTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TickTime {
      get { return tickTime_; }
      set {
        tickTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Telemetry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Telemetry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LapId != other.LapId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LapDistPct, other.LapDistPct)) return false;
      if (SessionId != other.SessionId) return false;
      if (SessionNum != other.SessionNum) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionName != other.SessionName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SessionTime, other.SessionTime)) return false;
      if (CarId != other.CarId) return false;
      if (TrackName != other.TrackName) return false;
      if (TrackId != other.TrackId) return false;
      if (WorkerId != other.WorkerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SteeringWheelAngle, other.SteeringWheelAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlayerCarPosition, other.PlayerCarPosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityX, other.VelocityX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityY, other.VelocityY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityZ, other.VelocityZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FuelLevel, other.FuelLevel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Throttle, other.Throttle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Brake, other.Brake)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rpm, other.Rpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat, other.Lat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon, other.Lon)) return false;
      if (Gear != other.Gear) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Alt, other.Alt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LatAccel, other.LatAccel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LongAccel, other.LongAccel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VertAccel, other.VertAccel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roll, other.Roll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YawNorth, other.YawNorth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Voltage, other.Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LapLastLapTime, other.LapLastLapTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WaterTemp, other.WaterTemp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LapDeltaToBestLap, other.LapDeltaToBestLap)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LapCurrentLapTime, other.LapCurrentLapTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LFpressure, other.LFpressure)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RFpressure, other.RFpressure)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LRpressure, other.LRpressure)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RRpressure, other.RRpressure)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LFtempM, other.LFtempM)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RFtempM, other.RFtempM)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LRtempM, other.LRtempM)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RRtempM, other.RRtempM)) return false;
      if (!object.Equals(TickTime, other.TickTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (LapId.Length != 0) hash ^= LapId.GetHashCode();
      if (Speed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Speed);
      if (LapDistPct != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LapDistPct);
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (SessionNum.Length != 0) hash ^= SessionNum.GetHashCode();
      if (SessionType.Length != 0) hash ^= SessionType.GetHashCode();
      if (SessionName.Length != 0) hash ^= SessionName.GetHashCode();
      if (SessionTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SessionTime);
      if (CarId.Length != 0) hash ^= CarId.GetHashCode();
      if (TrackName.Length != 0) hash ^= TrackName.GetHashCode();
      if (TrackId.Length != 0) hash ^= TrackId.GetHashCode();
      if (WorkerId != 0) hash ^= WorkerId.GetHashCode();
      if (SteeringWheelAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SteeringWheelAngle);
      if (PlayerCarPosition != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlayerCarPosition);
      if (VelocityX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityX);
      if (VelocityY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityY);
      if (VelocityZ != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityZ);
      if (FuelLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FuelLevel);
      if (Throttle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Throttle);
      if (Brake != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Brake);
      if (Rpm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rpm);
      if (Lat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat);
      if (Lon != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon);
      if (Gear != 0) hash ^= Gear.GetHashCode();
      if (Alt != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Alt);
      if (LatAccel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LatAccel);
      if (LongAccel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LongAccel);
      if (VertAccel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VertAccel);
      if (Pitch != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
      if (Roll != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roll);
      if (Yaw != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Yaw);
      if (YawNorth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YawNorth);
      if (Voltage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Voltage);
      if (LapLastLapTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LapLastLapTime);
      if (WaterTemp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WaterTemp);
      if (LapDeltaToBestLap != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LapDeltaToBestLap);
      if (LapCurrentLapTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LapCurrentLapTime);
      if (LFpressure != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LFpressure);
      if (RFpressure != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RFpressure);
      if (LRpressure != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LRpressure);
      if (RRpressure != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RRpressure);
      if (LFtempM != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LFtempM);
      if (RFtempM != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RFtempM);
      if (LRtempM != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LRtempM);
      if (RRtempM != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RRtempM);
      if (tickTime_ != null) hash ^= TickTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LapId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LapId);
      }
      if (Speed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Speed);
      }
      if (LapDistPct != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LapDistPct);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SessionId);
      }
      if (SessionNum.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SessionNum);
      }
      if (SessionType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SessionType);
      }
      if (SessionName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SessionName);
      }
      if (SessionTime != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(SessionTime);
      }
      if (CarId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CarId);
      }
      if (TrackName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TrackName);
      }
      if (TrackId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TrackId);
      }
      if (WorkerId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(WorkerId);
      }
      if (SteeringWheelAngle != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(SteeringWheelAngle);
      }
      if (PlayerCarPosition != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(PlayerCarPosition);
      }
      if (VelocityX != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(VelocityX);
      }
      if (VelocityY != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(VelocityY);
      }
      if (VelocityZ != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(VelocityZ);
      }
      if (FuelLevel != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(FuelLevel);
      }
      if (Throttle != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(Throttle);
      }
      if (Brake != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Brake);
      }
      if (Rpm != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Rpm);
      }
      if (Lat != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(Lon);
      }
      if (Gear != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Gear);
      }
      if (Alt != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(Alt);
      }
      if (LatAccel != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(LatAccel);
      }
      if (LongAccel != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(LongAccel);
      }
      if (VertAccel != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(VertAccel);
      }
      if (Pitch != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(Pitch);
      }
      if (Roll != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(Roll);
      }
      if (Yaw != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(Yaw);
      }
      if (YawNorth != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(YawNorth);
      }
      if (Voltage != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(Voltage);
      }
      if (LapLastLapTime != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(LapLastLapTime);
      }
      if (WaterTemp != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(WaterTemp);
      }
      if (LapDeltaToBestLap != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(LapDeltaToBestLap);
      }
      if (LapCurrentLapTime != 0D) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(LapCurrentLapTime);
      }
      if (LFpressure != 0D) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(LFpressure);
      }
      if (RFpressure != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(RFpressure);
      }
      if (LRpressure != 0D) {
        output.WriteRawTag(193, 2);
        output.WriteDouble(LRpressure);
      }
      if (RRpressure != 0D) {
        output.WriteRawTag(201, 2);
        output.WriteDouble(RRpressure);
      }
      if (LFtempM != 0D) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(LFtempM);
      }
      if (RFtempM != 0D) {
        output.WriteRawTag(217, 2);
        output.WriteDouble(RFtempM);
      }
      if (LRtempM != 0D) {
        output.WriteRawTag(225, 2);
        output.WriteDouble(LRtempM);
      }
      if (RRtempM != 0D) {
        output.WriteRawTag(233, 2);
        output.WriteDouble(RRtempM);
      }
      if (tickTime_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(TickTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LapId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LapId);
      }
      if (Speed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Speed);
      }
      if (LapDistPct != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LapDistPct);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SessionId);
      }
      if (SessionNum.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SessionNum);
      }
      if (SessionType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SessionType);
      }
      if (SessionName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SessionName);
      }
      if (SessionTime != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(SessionTime);
      }
      if (CarId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CarId);
      }
      if (TrackName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TrackName);
      }
      if (TrackId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TrackId);
      }
      if (WorkerId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(WorkerId);
      }
      if (SteeringWheelAngle != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(SteeringWheelAngle);
      }
      if (PlayerCarPosition != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(PlayerCarPosition);
      }
      if (VelocityX != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(VelocityX);
      }
      if (VelocityY != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(VelocityY);
      }
      if (VelocityZ != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(VelocityZ);
      }
      if (FuelLevel != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(FuelLevel);
      }
      if (Throttle != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(Throttle);
      }
      if (Brake != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Brake);
      }
      if (Rpm != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Rpm);
      }
      if (Lat != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(Lon);
      }
      if (Gear != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Gear);
      }
      if (Alt != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(Alt);
      }
      if (LatAccel != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(LatAccel);
      }
      if (LongAccel != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(LongAccel);
      }
      if (VertAccel != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(VertAccel);
      }
      if (Pitch != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(Pitch);
      }
      if (Roll != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(Roll);
      }
      if (Yaw != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(Yaw);
      }
      if (YawNorth != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(YawNorth);
      }
      if (Voltage != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(Voltage);
      }
      if (LapLastLapTime != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(LapLastLapTime);
      }
      if (WaterTemp != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(WaterTemp);
      }
      if (LapDeltaToBestLap != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(LapDeltaToBestLap);
      }
      if (LapCurrentLapTime != 0D) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(LapCurrentLapTime);
      }
      if (LFpressure != 0D) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(LFpressure);
      }
      if (RFpressure != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(RFpressure);
      }
      if (LRpressure != 0D) {
        output.WriteRawTag(193, 2);
        output.WriteDouble(LRpressure);
      }
      if (RRpressure != 0D) {
        output.WriteRawTag(201, 2);
        output.WriteDouble(RRpressure);
      }
      if (LFtempM != 0D) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(LFtempM);
      }
      if (RFtempM != 0D) {
        output.WriteRawTag(217, 2);
        output.WriteDouble(RFtempM);
      }
      if (LRtempM != 0D) {
        output.WriteRawTag(225, 2);
        output.WriteDouble(LRtempM);
      }
      if (RRtempM != 0D) {
        output.WriteRawTag(233, 2);
        output.WriteDouble(RRtempM);
      }
      if (tickTime_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(TickTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (LapId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LapId);
      }
      if (Speed != 0D) {
        size += 1 + 8;
      }
      if (LapDistPct != 0D) {
        size += 1 + 8;
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (SessionNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionNum);
      }
      if (SessionType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionType);
      }
      if (SessionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionName);
      }
      if (SessionTime != 0D) {
        size += 1 + 8;
      }
      if (CarId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarId);
      }
      if (TrackName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TrackName);
      }
      if (TrackId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TrackId);
      }
      if (WorkerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WorkerId);
      }
      if (SteeringWheelAngle != 0D) {
        size += 1 + 8;
      }
      if (PlayerCarPosition != 0D) {
        size += 1 + 8;
      }
      if (VelocityX != 0D) {
        size += 1 + 8;
      }
      if (VelocityY != 0D) {
        size += 2 + 8;
      }
      if (VelocityZ != 0D) {
        size += 2 + 8;
      }
      if (FuelLevel != 0D) {
        size += 2 + 8;
      }
      if (Throttle != 0D) {
        size += 2 + 8;
      }
      if (Brake != 0D) {
        size += 2 + 8;
      }
      if (Rpm != 0D) {
        size += 2 + 8;
      }
      if (Lat != 0D) {
        size += 2 + 8;
      }
      if (Lon != 0D) {
        size += 2 + 8;
      }
      if (Gear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Gear);
      }
      if (Alt != 0D) {
        size += 2 + 8;
      }
      if (LatAccel != 0D) {
        size += 2 + 8;
      }
      if (LongAccel != 0D) {
        size += 2 + 8;
      }
      if (VertAccel != 0D) {
        size += 2 + 8;
      }
      if (Pitch != 0D) {
        size += 2 + 8;
      }
      if (Roll != 0D) {
        size += 2 + 8;
      }
      if (Yaw != 0D) {
        size += 2 + 8;
      }
      if (YawNorth != 0D) {
        size += 2 + 8;
      }
      if (Voltage != 0D) {
        size += 2 + 8;
      }
      if (LapLastLapTime != 0D) {
        size += 2 + 8;
      }
      if (WaterTemp != 0D) {
        size += 2 + 8;
      }
      if (LapDeltaToBestLap != 0D) {
        size += 2 + 8;
      }
      if (LapCurrentLapTime != 0D) {
        size += 2 + 8;
      }
      if (LFpressure != 0D) {
        size += 2 + 8;
      }
      if (RFpressure != 0D) {
        size += 2 + 8;
      }
      if (LRpressure != 0D) {
        size += 2 + 8;
      }
      if (RRpressure != 0D) {
        size += 2 + 8;
      }
      if (LFtempM != 0D) {
        size += 2 + 8;
      }
      if (RFtempM != 0D) {
        size += 2 + 8;
      }
      if (LRtempM != 0D) {
        size += 2 + 8;
      }
      if (RRtempM != 0D) {
        size += 2 + 8;
      }
      if (tickTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TickTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Telemetry other) {
      if (other == null) {
        return;
      }
      if (other.LapId.Length != 0) {
        LapId = other.LapId;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      if (other.LapDistPct != 0D) {
        LapDistPct = other.LapDistPct;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.SessionNum.Length != 0) {
        SessionNum = other.SessionNum;
      }
      if (other.SessionType.Length != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionName.Length != 0) {
        SessionName = other.SessionName;
      }
      if (other.SessionTime != 0D) {
        SessionTime = other.SessionTime;
      }
      if (other.CarId.Length != 0) {
        CarId = other.CarId;
      }
      if (other.TrackName.Length != 0) {
        TrackName = other.TrackName;
      }
      if (other.TrackId.Length != 0) {
        TrackId = other.TrackId;
      }
      if (other.WorkerId != 0) {
        WorkerId = other.WorkerId;
      }
      if (other.SteeringWheelAngle != 0D) {
        SteeringWheelAngle = other.SteeringWheelAngle;
      }
      if (other.PlayerCarPosition != 0D) {
        PlayerCarPosition = other.PlayerCarPosition;
      }
      if (other.VelocityX != 0D) {
        VelocityX = other.VelocityX;
      }
      if (other.VelocityY != 0D) {
        VelocityY = other.VelocityY;
      }
      if (other.VelocityZ != 0D) {
        VelocityZ = other.VelocityZ;
      }
      if (other.FuelLevel != 0D) {
        FuelLevel = other.FuelLevel;
      }
      if (other.Throttle != 0D) {
        Throttle = other.Throttle;
      }
      if (other.Brake != 0D) {
        Brake = other.Brake;
      }
      if (other.Rpm != 0D) {
        Rpm = other.Rpm;
      }
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lon != 0D) {
        Lon = other.Lon;
      }
      if (other.Gear != 0) {
        Gear = other.Gear;
      }
      if (other.Alt != 0D) {
        Alt = other.Alt;
      }
      if (other.LatAccel != 0D) {
        LatAccel = other.LatAccel;
      }
      if (other.LongAccel != 0D) {
        LongAccel = other.LongAccel;
      }
      if (other.VertAccel != 0D) {
        VertAccel = other.VertAccel;
      }
      if (other.Pitch != 0D) {
        Pitch = other.Pitch;
      }
      if (other.Roll != 0D) {
        Roll = other.Roll;
      }
      if (other.Yaw != 0D) {
        Yaw = other.Yaw;
      }
      if (other.YawNorth != 0D) {
        YawNorth = other.YawNorth;
      }
      if (other.Voltage != 0D) {
        Voltage = other.Voltage;
      }
      if (other.LapLastLapTime != 0D) {
        LapLastLapTime = other.LapLastLapTime;
      }
      if (other.WaterTemp != 0D) {
        WaterTemp = other.WaterTemp;
      }
      if (other.LapDeltaToBestLap != 0D) {
        LapDeltaToBestLap = other.LapDeltaToBestLap;
      }
      if (other.LapCurrentLapTime != 0D) {
        LapCurrentLapTime = other.LapCurrentLapTime;
      }
      if (other.LFpressure != 0D) {
        LFpressure = other.LFpressure;
      }
      if (other.RFpressure != 0D) {
        RFpressure = other.RFpressure;
      }
      if (other.LRpressure != 0D) {
        LRpressure = other.LRpressure;
      }
      if (other.RRpressure != 0D) {
        RRpressure = other.RRpressure;
      }
      if (other.LFtempM != 0D) {
        LFtempM = other.LFtempM;
      }
      if (other.RFtempM != 0D) {
        RFtempM = other.RFtempM;
      }
      if (other.LRtempM != 0D) {
        LRtempM = other.LRtempM;
      }
      if (other.RRtempM != 0D) {
        RRtempM = other.RRtempM;
      }
      if (other.tickTime_ != null) {
        if (tickTime_ == null) {
          TickTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TickTime.MergeFrom(other.TickTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LapId = input.ReadString();
            break;
          }
          case 17: {
            Speed = input.ReadDouble();
            break;
          }
          case 25: {
            LapDistPct = input.ReadDouble();
            break;
          }
          case 34: {
            SessionId = input.ReadString();
            break;
          }
          case 42: {
            SessionNum = input.ReadString();
            break;
          }
          case 50: {
            SessionType = input.ReadString();
            break;
          }
          case 58: {
            SessionName = input.ReadString();
            break;
          }
          case 65: {
            SessionTime = input.ReadDouble();
            break;
          }
          case 74: {
            CarId = input.ReadString();
            break;
          }
          case 82: {
            TrackName = input.ReadString();
            break;
          }
          case 90: {
            TrackId = input.ReadString();
            break;
          }
          case 96: {
            WorkerId = input.ReadUInt32();
            break;
          }
          case 105: {
            SteeringWheelAngle = input.ReadDouble();
            break;
          }
          case 113: {
            PlayerCarPosition = input.ReadDouble();
            break;
          }
          case 121: {
            VelocityX = input.ReadDouble();
            break;
          }
          case 129: {
            VelocityY = input.ReadDouble();
            break;
          }
          case 137: {
            VelocityZ = input.ReadDouble();
            break;
          }
          case 145: {
            FuelLevel = input.ReadDouble();
            break;
          }
          case 153: {
            Throttle = input.ReadDouble();
            break;
          }
          case 161: {
            Brake = input.ReadDouble();
            break;
          }
          case 169: {
            Rpm = input.ReadDouble();
            break;
          }
          case 177: {
            Lat = input.ReadDouble();
            break;
          }
          case 185: {
            Lon = input.ReadDouble();
            break;
          }
          case 192: {
            Gear = input.ReadUInt32();
            break;
          }
          case 201: {
            Alt = input.ReadDouble();
            break;
          }
          case 209: {
            LatAccel = input.ReadDouble();
            break;
          }
          case 217: {
            LongAccel = input.ReadDouble();
            break;
          }
          case 225: {
            VertAccel = input.ReadDouble();
            break;
          }
          case 233: {
            Pitch = input.ReadDouble();
            break;
          }
          case 241: {
            Roll = input.ReadDouble();
            break;
          }
          case 249: {
            Yaw = input.ReadDouble();
            break;
          }
          case 257: {
            YawNorth = input.ReadDouble();
            break;
          }
          case 265: {
            Voltage = input.ReadDouble();
            break;
          }
          case 273: {
            LapLastLapTime = input.ReadDouble();
            break;
          }
          case 281: {
            WaterTemp = input.ReadDouble();
            break;
          }
          case 289: {
            LapDeltaToBestLap = input.ReadDouble();
            break;
          }
          case 297: {
            LapCurrentLapTime = input.ReadDouble();
            break;
          }
          case 305: {
            LFpressure = input.ReadDouble();
            break;
          }
          case 313: {
            RFpressure = input.ReadDouble();
            break;
          }
          case 321: {
            LRpressure = input.ReadDouble();
            break;
          }
          case 329: {
            RRpressure = input.ReadDouble();
            break;
          }
          case 337: {
            LFtempM = input.ReadDouble();
            break;
          }
          case 345: {
            RFtempM = input.ReadDouble();
            break;
          }
          case 353: {
            LRtempM = input.ReadDouble();
            break;
          }
          case 361: {
            RRtempM = input.ReadDouble();
            break;
          }
          case 370: {
            if (tickTime_ == null) {
              TickTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TickTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LapId = input.ReadString();
            break;
          }
          case 17: {
            Speed = input.ReadDouble();
            break;
          }
          case 25: {
            LapDistPct = input.ReadDouble();
            break;
          }
          case 34: {
            SessionId = input.ReadString();
            break;
          }
          case 42: {
            SessionNum = input.ReadString();
            break;
          }
          case 50: {
            SessionType = input.ReadString();
            break;
          }
          case 58: {
            SessionName = input.ReadString();
            break;
          }
          case 65: {
            SessionTime = input.ReadDouble();
            break;
          }
          case 74: {
            CarId = input.ReadString();
            break;
          }
          case 82: {
            TrackName = input.ReadString();
            break;
          }
          case 90: {
            TrackId = input.ReadString();
            break;
          }
          case 96: {
            WorkerId = input.ReadUInt32();
            break;
          }
          case 105: {
            SteeringWheelAngle = input.ReadDouble();
            break;
          }
          case 113: {
            PlayerCarPosition = input.ReadDouble();
            break;
          }
          case 121: {
            VelocityX = input.ReadDouble();
            break;
          }
          case 129: {
            VelocityY = input.ReadDouble();
            break;
          }
          case 137: {
            VelocityZ = input.ReadDouble();
            break;
          }
          case 145: {
            FuelLevel = input.ReadDouble();
            break;
          }
          case 153: {
            Throttle = input.ReadDouble();
            break;
          }
          case 161: {
            Brake = input.ReadDouble();
            break;
          }
          case 169: {
            Rpm = input.ReadDouble();
            break;
          }
          case 177: {
            Lat = input.ReadDouble();
            break;
          }
          case 185: {
            Lon = input.ReadDouble();
            break;
          }
          case 192: {
            Gear = input.ReadUInt32();
            break;
          }
          case 201: {
            Alt = input.ReadDouble();
            break;
          }
          case 209: {
            LatAccel = input.ReadDouble();
            break;
          }
          case 217: {
            LongAccel = input.ReadDouble();
            break;
          }
          case 225: {
            VertAccel = input.ReadDouble();
            break;
          }
          case 233: {
            Pitch = input.ReadDouble();
            break;
          }
          case 241: {
            Roll = input.ReadDouble();
            break;
          }
          case 249: {
            Yaw = input.ReadDouble();
            break;
          }
          case 257: {
            YawNorth = input.ReadDouble();
            break;
          }
          case 265: {
            Voltage = input.ReadDouble();
            break;
          }
          case 273: {
            LapLastLapTime = input.ReadDouble();
            break;
          }
          case 281: {
            WaterTemp = input.ReadDouble();
            break;
          }
          case 289: {
            LapDeltaToBestLap = input.ReadDouble();
            break;
          }
          case 297: {
            LapCurrentLapTime = input.ReadDouble();
            break;
          }
          case 305: {
            LFpressure = input.ReadDouble();
            break;
          }
          case 313: {
            RFpressure = input.ReadDouble();
            break;
          }
          case 321: {
            LRpressure = input.ReadDouble();
            break;
          }
          case 329: {
            RRpressure = input.ReadDouble();
            break;
          }
          case 337: {
            LFtempM = input.ReadDouble();
            break;
          }
          case 345: {
            RFtempM = input.ReadDouble();
            break;
          }
          case 353: {
            LRtempM = input.ReadDouble();
            break;
          }
          case 361: {
            RRtempM = input.ReadDouble();
            break;
          }
          case 370: {
            if (tickTime_ == null) {
              TickTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TickTime);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TelemetryBatch : pb::IMessage<TelemetryBatch>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TelemetryBatch> _parser = new pb::MessageParser<TelemetryBatch>(() => new TelemetryBatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TelemetryBatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TelemetryService.Domain.Models.TelemetryTickReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TelemetryBatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TelemetryBatch(TelemetryBatch other) : this() {
      records_ = other.records_.Clone();
      batchId_ = other.batchId_;
      sessionId_ = other.sessionId_;
      workerId_ = other.workerId_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TelemetryBatch Clone() {
      return new TelemetryBatch(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TelemetryService.Domain.Models.Telemetry> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::TelemetryService.Domain.Models.Telemetry.Parser);
    private readonly pbc::RepeatedField<global::TelemetryService.Domain.Models.Telemetry> records_ = new pbc::RepeatedField<global::TelemetryService.Domain.Models.Telemetry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::TelemetryService.Domain.Models.Telemetry> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "batch_id" field.</summary>
    public const int BatchIdFieldNumber = 2;
    private string batchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BatchId {
      get { return batchId_; }
      set {
        batchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "worker_id" field.</summary>
    public const int WorkerIdFieldNumber = 4;
    private uint workerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WorkerId {
      get { return workerId_; }
      set {
        workerId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TelemetryBatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TelemetryBatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      if (BatchId != other.BatchId) return false;
      if (SessionId != other.SessionId) return false;
      if (WorkerId != other.WorkerId) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (BatchId.Length != 0) hash ^= BatchId.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (WorkerId != 0) hash ^= WorkerId.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      records_.WriteTo(output, _repeated_records_codec);
      if (BatchId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BatchId);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SessionId);
      }
      if (WorkerId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(WorkerId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      records_.WriteTo(ref output, _repeated_records_codec);
      if (BatchId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BatchId);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SessionId);
      }
      if (WorkerId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(WorkerId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (BatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchId);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (WorkerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WorkerId);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TelemetryBatch other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      if (other.BatchId.Length != 0) {
        BatchId = other.BatchId;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.WorkerId != 0) {
        WorkerId = other.WorkerId;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 18: {
            BatchId = input.ReadString();
            break;
          }
          case 26: {
            SessionId = input.ReadString();
            break;
          }
          case 32: {
            WorkerId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            records_.AddEntriesFrom(ref input, _repeated_records_codec);
            break;
          }
          case 18: {
            BatchId = input.ReadString();
            break;
          }
          case 26: {
            SessionId = input.ReadString();
            break;
          }
          case 32: {
            WorkerId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
