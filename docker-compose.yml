services:
  traefik:
    image: traefik:v3.5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "8080:80"   # HTTP redirect port
      - "8443:443"  # HTTPS main port  
      - "9080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
      - ./dynamic:/dynamic:ro
    networks:
      - telemetry-network
    depends_on:
      - grafana
      - telemetry-dashboard
      - questdb
      - prometheus
    deploy:
      resources:
        limits:
          cpus: 0.5
          memory: 512m
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    command:
      # EntryPoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"

      # Attach the static configuration tls.yaml file that contains the tls configuration settings
      - "--providers.file.filename=/dynamic/tls.yaml"

      # Providers 
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=telemetry-network"

      # API & Dashboard 
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Observability 
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"

  # Traefik Dynamic configuration via Docker labels
    labels:
      # Enable self‑routing
      - "traefik.enable=true"

      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.docker.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"

      # Basic‑auth middleware
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth@docker"

      # Let's Encrypt configuration (uncomment when deploying to production)
      # - "--certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}"
      # - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      # - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      # - "--entrypoints.websecure.http.tls.certresolver=le"

      - "--entrypoints.metrics.address=:8082"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entrypoint=metrics"
      - "--metrics.prometheus.addrouterslabels=true"
      - "--metrics.prometheus.addserviceslabels=true"


  rabbitMQ:
    container_name: rabbitMQ
    image: rabbitmq:4.0-management
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./enabled_plugins:/etc/rabbitmq/enabled_plugins
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - telemetry-network
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 2g
    shm_size: 256m
    labels:
      # Traefik labels - RabbitMQ Management
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`${HOST_IP:-192.168.1.202}`) && PathPrefix(`/rabbitmq`)"
      - "traefik.http.routers.rabbitmq.entrypoints=websecure"
      - "traefik.http.routers.rabbitmq.tls=true"
      - "traefik.http.routers.rabbitmq.priority=100"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
      - "traefik.http.middlewares.rabbitmq-stripprefix.stripprefix.prefixes=/rabbitmq"
      - "traefik.http.routers.rabbitmq.middlewares=rabbitmq-stripprefix"

  telemetry_service:
    image: ghcr.io/ojparkinson/iracing-telemetryservice:latest
    container_name: telemetry_service
    restart: on-failure
    ports:
      - "5000:5000"
    depends_on:
      rabbitMQ:
        condition: service_healthy
    networks:
      - telemetry-network
    environment:
      QUESTDB_URL: ${QUESTDB_URL}
      DOTNET_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:5000
      DOTNET_GCRetainVM: 1
      DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 1
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 2g
    shm_size: 256m
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      com.centurylinklabs.watchtower.monitor-only: "false"

  telemetry-dashboard:
    image: ghcr.io/ojparkinson/iracing-display:latest
    container_name: telemetry-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    networks:
      - telemetry-network
    deploy:
      resources:
        limits:
          cpus: 2
          memory: 3g
    shm_size: 256m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.telemetry-dashboard.rule=Host(`${HOST_IP:-192.168.1.202}`)"
      - "traefik.http.routers.telemetry-dashboard.entrypoints=websecure"
      - "traefik.http.routers.telemetry-dashboard.tls=true"
      - "traefik.http.routers.telemetry-dashboard.priority=1"
      - "traefik.http.services.telemetry-dashboard.loadbalancer.server.port=3000"

      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.monitor-only=false"
    
  questdb:
    image: questdb/questdb:latest
    container_name: questdb
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "8812:8812"
      - "9003:9003"
    volumes:
      - questdb-data:/root/.questdb
    environment:
      - QDB_METRICS_ENABLED=true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/8812' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - telemetry-network
    labels:
      # Traefik labels - QuestDB
      - "traefik.enable=true"
      - "traefik.http.routers.questdb.rule=Host(`${HOST_IP:-192.168.1.202}`) && PathPrefix(`/questdb`)"
      - "traefik.http.routers.questdb.entrypoints=websecure"
      - "traefik.http.routers.questdb.tls=true"
      - "traefik.http.routers.questdb.priority=100"
      - "traefik.http.services.questdb.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.questdb-stripprefix.stripprefix.prefixes=/questdb"
      - "traefik.http.routers.questdb.middlewares=questdb-stripprefix"

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HOME}/.docker/config.json:/config.json
    command: --interval 120 --cleanup --label-enable
    environment:
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=generic://?template=Default
      - TZ=Europe/London
      - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_DOCKER_TOKEN}
    deploy:
      resources:
        limits:
          cpus: 0.5
          memory: 1g

  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - telemetry-network

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - telemetry-network
    labels:
      # Traefik labels - Prometheus
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${HOST_IP:-192.168.1.202}`) && PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.priority=100"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.middlewares.prometheus-stripprefix.stripprefix.prefixes=/prometheus"
      - "traefik.http.routers.prometheus.middlewares=prometheus-stripprefix"

  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - telemetry-network

  alloy:
    image: grafana/alloy:v1.4.2
    container_name: grafana-alloy
    restart: unless-stopped
    ports:
      - "12345:12345"
    volumes:
      - ./alloy-config.alloy:/etc/alloy/config.alloy:ro
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - alloy-data:/var/lib/alloy/data
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    networks:
      - telemetry-network
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:10.4.8
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards/files:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - telemetry-network
    user: "472:472"
    labels:
      # Traefik labels - Grafana
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${HOST_IP:-192.168.1.202}`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.priority=100"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.grafana-stripprefix.stripprefix.prefixes=/grafana"
      - "traefik.http.routers.grafana.middlewares=grafana-stripprefix"

volumes:
  rabbitmq-data:
  questdb-data:
  prometheus-data:
  loki-data:
  grafana-data:
  alloy-data:
  nginx-logs:


networks:
  telemetry-network:
    external: true
