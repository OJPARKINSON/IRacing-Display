# Raspberry Pi 5 16GB Simulation Configuration
# This simulates Pi 5 hardware constraints: 4-core ARM Cortex-A76 @ 2.4GHz, 16GB RAM

services:
  rabbitMQ:
    container_name: rabbitMQ
    image: rabbitmq:4.0-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - telemetry-network
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    # Pi 5 Constraints: Single core, limited memory
    deploy:
      resources:
        limits:
          cpus: "1.0"      # 1 of 4 cores
          memory: 2G       # Conservative allocation
        reservations:
          cpus: "0.5"
          memory: 512M
    shm_size: 128m

  telemetry_service:
    image: ghcr.io/ojparkinson/iracing-telemetryservice:latest
    container_name: telemetry_service
    restart: on-failure
    ports:
      - "5000:5000"
    depends_on:
      rabbitMQ:
        condition: service_healthy
    networks:
      - telemetry-network
    environment:
      QUESTDB_URL: ${QUESTDB_URL}
      DOTNET_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:5000
      DOTNET_GCRetainVM: 1
      DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: true
      # Pi 5 optimizations
      DOTNET_SYSTEM_GC_HEAPCOUNT: 2         # Limit GC heaps
      DOTNET_SYSTEM_GC_NOAFFINITIZE: 1      # No CPU affinity
      DOTNET_TIERED_COMPILATION: 0          # Disable tiered compilation
    # Pi 5 Constraints: Single core, limited memory
    deploy:
      resources:
        limits:
          cpus: "1.0"      # 1 of 4 cores
          memory: 1.5G     # Conservative for .NET
        reservations:
          cpus: "0.25"
          memory: 256M
    shm_size: 64m

  telemetry-dashboard:
    image: ghcr.io/ojparkinson/iracing-display:latest
    container_name: telemetry-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      # Pi 5 Node.js optimizations
      NODE_OPTIONS: "--max-old-space-size=1024 --max-semi-space-size=64"
    networks:
      - telemetry-network
    # Pi 5 Constraints: Single core for web interface
    deploy:
      resources:
        limits:
          cpus: "0.75"     # 3/4 of a core
          memory: 1.2G     # Limited for Node.js
        reservations:
          cpus: "0.1"
          memory: 128M
    shm_size: 32m
    
  questdb:
    image: questdb/questdb:latest
    container_name: questdb
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "8812:8812"
    volumes:
      - questdb-data:/root/.questdb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/8812' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - telemetry-network
    environment:
      # Pi 5 QuestDB optimizations
      QDB_CAIRO_COMMIT_LAG: "30s"
      QDB_CAIRO_MAX_UNCOMMITTED_ROWS: "250000"  # Reduced for Pi
      QDB_PG_NET_ACTIVE_CONNECTION_LIMIT: "10"
      QDB_HTTP_NET_ACTIVE_CONNECTION_LIMIT: "10"
      QDB_LINE_TCP_NET_ACTIVE_CONNECTION_LIMIT: "10"
      QDB_SHARED_WORKER_COUNT: "2"              # 2 workers max
      JAVA_OPTS: "-Xms512m -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=50"
    # Pi 5 Constraints: 1.5 cores (main workload)
    deploy:
      resources:
        limits:
          cpus: "1.5"      # 1.5 of 4 cores
          memory: 3G       # Main memory allocation
        reservations:
          cpus: "0.5"
          memory: 512M
    shm_size: 256m

volumes:
  rabbitmq-data:
  questdb-data:

networks:
  telemetry-network:
    driver: bridge