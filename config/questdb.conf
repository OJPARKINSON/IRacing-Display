# QuestDB Configuration File
# High-Performance Configuration for Pi5 (16GB RAM) + 7600X Architecture
# Optimized for 3-6 GB/hour sustained telemetry ingestion

# =============================================================================
# HTTP Interface (Web Console + HTTP Ingress)
# =============================================================================
http.enabled=true
http.bind.to=0.0.0.0:9000
# Increased connection pools for high concurrency
http.connection.pool.initial.capacity=64
http.connection.string.pool.capacity=512
http.multipart.header.buffer.size=1024
http.multipart.idle.spin.count=10000
# Larger buffers for high throughput
http.receive.buffer.size=2097152         # 2MB receive buffer
http.request.header.buffer.size=65536
http.response.header.buffer.size=65536   # 64KB response buffer
http.send.buffer.size=2097152            # 2MB send buffer
http.static.index.file.name=index.html

# =============================================================================
# PostgreSQL Wire Protocol (Dashboard & Grafana READ Operations)
# =============================================================================
pg.enabled=true
pg.net.bind.to=0.0.0.0:8812
# High connection limits for concurrent dashboard users
pg.net.connection.limit=128               # Support 50+ concurrent users
pg.character.store.capacity=16384         # Larger character storage
pg.connection.pool.capacity=128           # Match connection limit
pg.password=quest
pg.user=admin
# Query optimization
pg.select.cache.enabled=true
pg.select.cache.block.count=128
pg.insert.cache.enabled=true
pg.insert.cache.row.count=256000

# =============================================================================
# InfluxDB Line Protocol over TCP (High-Throughput Telemetry Ingestion)
# =============================================================================
line.tcp.enabled=true
line.tcp.net.bind.to=0.0.0.0:9009
# Aggressive connection pooling for 7600X ingress
line.tcp.connection.pool.capacity=128     # Handle high concurrent connections
line.tcp.net.connection.hint=true
line.tcp.net.connection.limit=512         # Support many concurrent writers
line.tcp.net.connection.queue.timeout=300000
line.tcp.timestamp=n
# Large buffers for high-throughput ingestion
line.tcp.recv.buffer.size=131072           # 128KB message buffers

# =============================================================================
# InfluxDB Line Protocol over HTTP (Alternative Ingress)
# =============================================================================
line.http.enabled=true

# =============================================================================
# Performance & Memory Optimization (Pi5 16GB Tuning)
# =============================================================================

# Cairo Engine (High-Performance Time-Series Storage)
cairo.commit.lag=60000                    # 1 minute lag for performance
cairo.max.uncommitted.rows=10000         # Large uncommitted batches
# cairo.commit.mode=nosync                 # Faster commits (careful with durability)
# cairo.wal.enabled.default=false          # Disable WAL for speed (careful!)

# Memory Management (Optimized for 16GB system)
cairo.sql.copy.root=/tmp/questdb         # Use fast temp storage
cairo.sql.backup.root=/var/lib/questdb/backup
cairo.sql.backup.mkdir.mode=764

# Shared Worker Pool (Utilize Pi5's 4 cores effectively)
shared.worker.count=4                     # Use all 4 Pi5 cores
shared.worker.affinity=1,2,3,4           # Pin to specific cores
shared.worker.yield.threshold=10
# shared.worker.spin.before.yield=1000  # Invalid property - removed

# =============================================================================
# Query Performance Optimization
# =============================================================================

# SQL Query Engine
cairo.sql.copy.buffer.size=2097152       # 2MB copy buffer
# cairo.sql.create.as.select.retry.count=5  # Invalid property - removed
cairo.sql.double.cast.scale=12
cairo.sql.groupby.map.capacity=1024
cairo.sql.groupby.pool.capacity=1024

# Join and Aggregation Optimization
cairo.sql.join.context.pool.capacity=64
cairo.sql.max.negative.limit=10000
cairo.sql.sort.key.page.size=4194304     # 4MB sort pages
cairo.sql.sort.key.max.pages=256
cairo.sql.sort.light.value.page.size=1048576  # 1MB value pages
cairo.sql.sort.light.value.max.pages=1024

# =============================================================================
# I/O Optimization (PCIe SSD on Pi5)
# =============================================================================

# Page Cache Settings
cairo.writer.data.append.page.size=16777216    # 16MB pages for large writes
cairo.writer.misc.append.page.size=4194304     # 4MB misc pages

# =============================================================================
# Network & Protocol Optimization
# =============================================================================

# Circuit Breaker Pattern
net.test.connection.buffer.size=128
circuit.breaker.throttle=100

# Metrics and Monitoring
metrics.enabled=true

# =============================================================================
# Security Settings
# =============================================================================
# Note: In production, consider enabling authentication
# http.security.readonly=false
# pg.readonly.user.enabled=true

# =============================================================================
# Performance Notes
# =============================================================================
# This configuration is optimized for:
# - Pi5 with 16GB RAM and 4 ARM Cortex-A76 cores
# - USB 3.0 SSD storage (500-1000 MB/s)
# - High-throughput telemetry ingestion from 7600X
# - 20-50 concurrent dashboard users
# - Expected throughput: 2-5 GB/hour sustained

# Memory Usage Estimation:
# - Base QuestDB: ~1GB
# - Connection pools: ~1-2GB
# - Query caches: ~1-2GB
# - Buffer pools: ~1-2GB
# - Total: ~4-6GB (comfortable with 16GB system)

# WARNING: Some settings prioritize performance over durability
# - cairo.commit.mode=nosync: Faster but less durable
# - cairo.wal.enabled.default=false: No write-ahead log
# - Consider enabling these for critical production data