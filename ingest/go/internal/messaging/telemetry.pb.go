// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: internal/messaging/telemetry.proto

package messaging

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Telemetry struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	LapId              string                 `protobuf:"bytes,1,opt,name=lap_id,json=lapId,proto3" json:"lap_id,omitempty"`
	Speed              float64                `protobuf:"fixed64,2,opt,name=speed,proto3" json:"speed,omitempty"`
	LapDistPct         float64                `protobuf:"fixed64,3,opt,name=lap_dist_pct,json=lapDistPct,proto3" json:"lap_dist_pct,omitempty"`
	SessionId          string                 `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionNum         string                 `protobuf:"bytes,5,opt,name=session_num,json=sessionNum,proto3" json:"session_num,omitempty"`
	SessionType        string                 `protobuf:"bytes,6,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`
	SessionName        string                 `protobuf:"bytes,7,opt,name=session_name,json=sessionName,proto3" json:"session_name,omitempty"`
	SessionTime        float64                `protobuf:"fixed64,8,opt,name=session_time,json=sessionTime,proto3" json:"session_time,omitempty"`
	CarId              string                 `protobuf:"bytes,9,opt,name=car_id,json=carId,proto3" json:"car_id,omitempty"`
	TrackName          string                 `protobuf:"bytes,10,opt,name=track_name,json=trackName,proto3" json:"track_name,omitempty"`
	TrackId            string                 `protobuf:"bytes,11,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	WorkerId           uint32                 `protobuf:"varint,12,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	SteeringWheelAngle float64                `protobuf:"fixed64,13,opt,name=steering_wheel_angle,json=steeringWheelAngle,proto3" json:"steering_wheel_angle,omitempty"`
	PlayerCarPosition  float64                `protobuf:"fixed64,14,opt,name=player_car_position,json=playerCarPosition,proto3" json:"player_car_position,omitempty"`
	VelocityX          float64                `protobuf:"fixed64,15,opt,name=velocity_x,json=velocityX,proto3" json:"velocity_x,omitempty"`
	VelocityY          float64                `protobuf:"fixed64,16,opt,name=velocity_y,json=velocityY,proto3" json:"velocity_y,omitempty"`
	VelocityZ          float64                `protobuf:"fixed64,17,opt,name=velocity_z,json=velocityZ,proto3" json:"velocity_z,omitempty"`
	FuelLevel          float64                `protobuf:"fixed64,18,opt,name=fuel_level,json=fuelLevel,proto3" json:"fuel_level,omitempty"`
	Throttle           float64                `protobuf:"fixed64,19,opt,name=throttle,proto3" json:"throttle,omitempty"`
	Brake              float64                `protobuf:"fixed64,20,opt,name=brake,proto3" json:"brake,omitempty"`
	Rpm                float64                `protobuf:"fixed64,21,opt,name=rpm,proto3" json:"rpm,omitempty"`
	Lat                float64                `protobuf:"fixed64,22,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon                float64                `protobuf:"fixed64,23,opt,name=lon,proto3" json:"lon,omitempty"`
	Gear               uint32                 `protobuf:"varint,24,opt,name=gear,proto3" json:"gear,omitempty"`
	Alt                float64                `protobuf:"fixed64,25,opt,name=alt,proto3" json:"alt,omitempty"`
	LatAccel           float64                `protobuf:"fixed64,26,opt,name=lat_accel,json=latAccel,proto3" json:"lat_accel,omitempty"`
	LongAccel          float64                `protobuf:"fixed64,27,opt,name=long_accel,json=longAccel,proto3" json:"long_accel,omitempty"`
	VertAccel          float64                `protobuf:"fixed64,28,opt,name=vert_accel,json=vertAccel,proto3" json:"vert_accel,omitempty"`
	Pitch              float64                `protobuf:"fixed64,29,opt,name=pitch,proto3" json:"pitch,omitempty"`
	Roll               float64                `protobuf:"fixed64,30,opt,name=roll,proto3" json:"roll,omitempty"`
	Yaw                float64                `protobuf:"fixed64,31,opt,name=yaw,proto3" json:"yaw,omitempty"`
	YawNorth           float64                `protobuf:"fixed64,32,opt,name=yaw_north,json=yawNorth,proto3" json:"yaw_north,omitempty"`
	Voltage            float64                `protobuf:"fixed64,33,opt,name=voltage,proto3" json:"voltage,omitempty"`
	LapLastLapTime     float64                `protobuf:"fixed64,34,opt,name=lap_last_lap_time,json=lapLastLapTime,proto3" json:"lap_last_lap_time,omitempty"`
	WaterTemp          float64                `protobuf:"fixed64,35,opt,name=water_temp,json=waterTemp,proto3" json:"water_temp,omitempty"`
	LapDeltaToBestLap  float64                `protobuf:"fixed64,36,opt,name=lap_delta_to_best_lap,json=lapDeltaToBestLap,proto3" json:"lap_delta_to_best_lap,omitempty"`
	LapCurrentLapTime  float64                `protobuf:"fixed64,37,opt,name=lap_current_lap_time,json=lapCurrentLapTime,proto3" json:"lap_current_lap_time,omitempty"`
	LFpressure         float64                `protobuf:"fixed64,38,opt,name=l_fpressure,json=lFpressure,proto3" json:"l_fpressure,omitempty"`
	RFpressure         float64                `protobuf:"fixed64,39,opt,name=r_fpressure,json=rFpressure,proto3" json:"r_fpressure,omitempty"`
	LRpressure         float64                `protobuf:"fixed64,40,opt,name=l_rpressure,json=lRpressure,proto3" json:"l_rpressure,omitempty"`
	RRpressure         float64                `protobuf:"fixed64,41,opt,name=r_rpressure,json=rRpressure,proto3" json:"r_rpressure,omitempty"`
	LFtempM            float64                `protobuf:"fixed64,42,opt,name=l_ftemp_m,json=lFtempM,proto3" json:"l_ftemp_m,omitempty"`
	RFtempM            float64                `protobuf:"fixed64,43,opt,name=r_ftemp_m,json=rFtempM,proto3" json:"r_ftemp_m,omitempty"`
	LRtempM            float64                `protobuf:"fixed64,44,opt,name=l_rtemp_m,json=lRtempM,proto3" json:"l_rtemp_m,omitempty"`
	RRtempM            float64                `protobuf:"fixed64,45,opt,name=r_rtemp_m,json=rRtempM,proto3" json:"r_rtemp_m,omitempty"`
	TickTime           *timestamppb.Timestamp `protobuf:"bytes,46,opt,name=tick_time,json=tickTime,proto3" json:"tick_time,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	mi := &file_internal_messaging_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_internal_messaging_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_internal_messaging_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *Telemetry) GetLapId() string {
	if x != nil {
		return x.LapId
	}
	return ""
}

func (x *Telemetry) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Telemetry) GetLapDistPct() float64 {
	if x != nil {
		return x.LapDistPct
	}
	return 0
}

func (x *Telemetry) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Telemetry) GetSessionNum() string {
	if x != nil {
		return x.SessionNum
	}
	return ""
}

func (x *Telemetry) GetSessionType() string {
	if x != nil {
		return x.SessionType
	}
	return ""
}

func (x *Telemetry) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

func (x *Telemetry) GetSessionTime() float64 {
	if x != nil {
		return x.SessionTime
	}
	return 0
}

func (x *Telemetry) GetCarId() string {
	if x != nil {
		return x.CarId
	}
	return ""
}

func (x *Telemetry) GetTrackName() string {
	if x != nil {
		return x.TrackName
	}
	return ""
}

func (x *Telemetry) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

func (x *Telemetry) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Telemetry) GetSteeringWheelAngle() float64 {
	if x != nil {
		return x.SteeringWheelAngle
	}
	return 0
}

func (x *Telemetry) GetPlayerCarPosition() float64 {
	if x != nil {
		return x.PlayerCarPosition
	}
	return 0
}

func (x *Telemetry) GetVelocityX() float64 {
	if x != nil {
		return x.VelocityX
	}
	return 0
}

func (x *Telemetry) GetVelocityY() float64 {
	if x != nil {
		return x.VelocityY
	}
	return 0
}

func (x *Telemetry) GetVelocityZ() float64 {
	if x != nil {
		return x.VelocityZ
	}
	return 0
}

func (x *Telemetry) GetFuelLevel() float64 {
	if x != nil {
		return x.FuelLevel
	}
	return 0
}

func (x *Telemetry) GetThrottle() float64 {
	if x != nil {
		return x.Throttle
	}
	return 0
}

func (x *Telemetry) GetBrake() float64 {
	if x != nil {
		return x.Brake
	}
	return 0
}

func (x *Telemetry) GetRpm() float64 {
	if x != nil {
		return x.Rpm
	}
	return 0
}

func (x *Telemetry) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Telemetry) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Telemetry) GetGear() uint32 {
	if x != nil {
		return x.Gear
	}
	return 0
}

func (x *Telemetry) GetAlt() float64 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *Telemetry) GetLatAccel() float64 {
	if x != nil {
		return x.LatAccel
	}
	return 0
}

func (x *Telemetry) GetLongAccel() float64 {
	if x != nil {
		return x.LongAccel
	}
	return 0
}

func (x *Telemetry) GetVertAccel() float64 {
	if x != nil {
		return x.VertAccel
	}
	return 0
}

func (x *Telemetry) GetPitch() float64 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *Telemetry) GetRoll() float64 {
	if x != nil {
		return x.Roll
	}
	return 0
}

func (x *Telemetry) GetYaw() float64 {
	if x != nil {
		return x.Yaw
	}
	return 0
}

func (x *Telemetry) GetYawNorth() float64 {
	if x != nil {
		return x.YawNorth
	}
	return 0
}

func (x *Telemetry) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *Telemetry) GetLapLastLapTime() float64 {
	if x != nil {
		return x.LapLastLapTime
	}
	return 0
}

func (x *Telemetry) GetWaterTemp() float64 {
	if x != nil {
		return x.WaterTemp
	}
	return 0
}

func (x *Telemetry) GetLapDeltaToBestLap() float64 {
	if x != nil {
		return x.LapDeltaToBestLap
	}
	return 0
}

func (x *Telemetry) GetLapCurrentLapTime() float64 {
	if x != nil {
		return x.LapCurrentLapTime
	}
	return 0
}

func (x *Telemetry) GetLFpressure() float64 {
	if x != nil {
		return x.LFpressure
	}
	return 0
}

func (x *Telemetry) GetRFpressure() float64 {
	if x != nil {
		return x.RFpressure
	}
	return 0
}

func (x *Telemetry) GetLRpressure() float64 {
	if x != nil {
		return x.LRpressure
	}
	return 0
}

func (x *Telemetry) GetRRpressure() float64 {
	if x != nil {
		return x.RRpressure
	}
	return 0
}

func (x *Telemetry) GetLFtempM() float64 {
	if x != nil {
		return x.LFtempM
	}
	return 0
}

func (x *Telemetry) GetRFtempM() float64 {
	if x != nil {
		return x.RFtempM
	}
	return 0
}

func (x *Telemetry) GetLRtempM() float64 {
	if x != nil {
		return x.LRtempM
	}
	return 0
}

func (x *Telemetry) GetRRtempM() float64 {
	if x != nil {
		return x.RRtempM
	}
	return 0
}

func (x *Telemetry) GetTickTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TickTime
	}
	return nil
}

type TelemetryBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*Telemetry           `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	BatchId       string                 `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	WorkerId      uint32                 `protobuf:"varint,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryBatch) Reset() {
	*x = TelemetryBatch{}
	mi := &file_internal_messaging_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryBatch) ProtoMessage() {}

func (x *TelemetryBatch) ProtoReflect() protoreflect.Message {
	mi := &file_internal_messaging_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryBatch.ProtoReflect.Descriptor instead.
func (*TelemetryBatch) Descriptor() ([]byte, []int) {
	return file_internal_messaging_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryBatch) GetRecords() []*Telemetry {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *TelemetryBatch) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *TelemetryBatch) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TelemetryBatch) GetWorkerId() uint32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *TelemetryBatch) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_internal_messaging_telemetry_proto protoreflect.FileDescriptor

const file_internal_messaging_telemetry_proto_rawDesc = "" +
	"\n" +
	"\"internal/messaging/telemetry.proto\x12\x06pubSub\x1a\x1fgoogle/protobuf/timestamp.proto\"\x85\v\n" +
	"\tTelemetry\x12\x15\n" +
	"\x06lap_id\x18\x01 \x01(\tR\x05lapId\x12\x14\n" +
	"\x05speed\x18\x02 \x01(\x01R\x05speed\x12 \n" +
	"\flap_dist_pct\x18\x03 \x01(\x01R\n" +
	"lapDistPct\x12\x1d\n" +
	"\n" +
	"session_id\x18\x04 \x01(\tR\tsessionId\x12\x1f\n" +
	"\vsession_num\x18\x05 \x01(\tR\n" +
	"sessionNum\x12!\n" +
	"\fsession_type\x18\x06 \x01(\tR\vsessionType\x12!\n" +
	"\fsession_name\x18\a \x01(\tR\vsessionName\x12!\n" +
	"\fsession_time\x18\b \x01(\x01R\vsessionTime\x12\x15\n" +
	"\x06car_id\x18\t \x01(\tR\x05carId\x12\x1d\n" +
	"\n" +
	"track_name\x18\n" +
	" \x01(\tR\ttrackName\x12\x19\n" +
	"\btrack_id\x18\v \x01(\tR\atrackId\x12\x1b\n" +
	"\tworker_id\x18\f \x01(\rR\bworkerId\x120\n" +
	"\x14steering_wheel_angle\x18\r \x01(\x01R\x12steeringWheelAngle\x12.\n" +
	"\x13player_car_position\x18\x0e \x01(\x01R\x11playerCarPosition\x12\x1d\n" +
	"\n" +
	"velocity_x\x18\x0f \x01(\x01R\tvelocityX\x12\x1d\n" +
	"\n" +
	"velocity_y\x18\x10 \x01(\x01R\tvelocityY\x12\x1d\n" +
	"\n" +
	"velocity_z\x18\x11 \x01(\x01R\tvelocityZ\x12\x1d\n" +
	"\n" +
	"fuel_level\x18\x12 \x01(\x01R\tfuelLevel\x12\x1a\n" +
	"\bthrottle\x18\x13 \x01(\x01R\bthrottle\x12\x14\n" +
	"\x05brake\x18\x14 \x01(\x01R\x05brake\x12\x10\n" +
	"\x03rpm\x18\x15 \x01(\x01R\x03rpm\x12\x10\n" +
	"\x03lat\x18\x16 \x01(\x01R\x03lat\x12\x10\n" +
	"\x03lon\x18\x17 \x01(\x01R\x03lon\x12\x12\n" +
	"\x04gear\x18\x18 \x01(\rR\x04gear\x12\x10\n" +
	"\x03alt\x18\x19 \x01(\x01R\x03alt\x12\x1b\n" +
	"\tlat_accel\x18\x1a \x01(\x01R\blatAccel\x12\x1d\n" +
	"\n" +
	"long_accel\x18\x1b \x01(\x01R\tlongAccel\x12\x1d\n" +
	"\n" +
	"vert_accel\x18\x1c \x01(\x01R\tvertAccel\x12\x14\n" +
	"\x05pitch\x18\x1d \x01(\x01R\x05pitch\x12\x12\n" +
	"\x04roll\x18\x1e \x01(\x01R\x04roll\x12\x10\n" +
	"\x03yaw\x18\x1f \x01(\x01R\x03yaw\x12\x1b\n" +
	"\tyaw_north\x18  \x01(\x01R\byawNorth\x12\x18\n" +
	"\avoltage\x18! \x01(\x01R\avoltage\x12)\n" +
	"\x11lap_last_lap_time\x18\" \x01(\x01R\x0elapLastLapTime\x12\x1d\n" +
	"\n" +
	"water_temp\x18# \x01(\x01R\twaterTemp\x120\n" +
	"\x15lap_delta_to_best_lap\x18$ \x01(\x01R\x11lapDeltaToBestLap\x12/\n" +
	"\x14lap_current_lap_time\x18% \x01(\x01R\x11lapCurrentLapTime\x12\x1f\n" +
	"\vl_fpressure\x18& \x01(\x01R\n" +
	"lFpressure\x12\x1f\n" +
	"\vr_fpressure\x18' \x01(\x01R\n" +
	"rFpressure\x12\x1f\n" +
	"\vl_rpressure\x18( \x01(\x01R\n" +
	"lRpressure\x12\x1f\n" +
	"\vr_rpressure\x18) \x01(\x01R\n" +
	"rRpressure\x12\x1a\n" +
	"\tl_ftemp_m\x18* \x01(\x01R\alFtempM\x12\x1a\n" +
	"\tr_ftemp_m\x18+ \x01(\x01R\arFtempM\x12\x1a\n" +
	"\tl_rtemp_m\x18, \x01(\x01R\alRtempM\x12\x1a\n" +
	"\tr_rtemp_m\x18- \x01(\x01R\arRtempM\x127\n" +
	"\ttick_time\x18. \x01(\v2\x1a.google.protobuf.TimestampR\btickTime\"\xce\x01\n" +
	"\x0eTelemetryBatch\x12+\n" +
	"\arecords\x18\x01 \x03(\v2\x11.pubSub.TelemetryR\arecords\x12\x19\n" +
	"\bbatch_id\x18\x02 \x01(\tR\abatchId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x03 \x01(\tR\tsessionId\x12\x1b\n" +
	"\tworker_id\x18\x04 \x01(\rR\bworkerId\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestampBEZCgithub.com/OJPARKINSON/IRacing-Display/ingest/go/internal/messagingb\x06proto3"

var (
	file_internal_messaging_telemetry_proto_rawDescOnce sync.Once
	file_internal_messaging_telemetry_proto_rawDescData []byte
)

func file_internal_messaging_telemetry_proto_rawDescGZIP() []byte {
	file_internal_messaging_telemetry_proto_rawDescOnce.Do(func() {
		file_internal_messaging_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_messaging_telemetry_proto_rawDesc), len(file_internal_messaging_telemetry_proto_rawDesc)))
	})
	return file_internal_messaging_telemetry_proto_rawDescData
}

var file_internal_messaging_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_internal_messaging_telemetry_proto_goTypes = []any{
	(*Telemetry)(nil),             // 0: pubSub.Telemetry
	(*TelemetryBatch)(nil),        // 1: pubSub.TelemetryBatch
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_internal_messaging_telemetry_proto_depIdxs = []int32{
	2, // 0: pubSub.Telemetry.tick_time:type_name -> google.protobuf.Timestamp
	0, // 1: pubSub.TelemetryBatch.records:type_name -> pubSub.Telemetry
	2, // 2: pubSub.TelemetryBatch.timestamp:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_internal_messaging_telemetry_proto_init() }
func file_internal_messaging_telemetry_proto_init() {
	if File_internal_messaging_telemetry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_messaging_telemetry_proto_rawDesc), len(file_internal_messaging_telemetry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_messaging_telemetry_proto_goTypes,
		DependencyIndexes: file_internal_messaging_telemetry_proto_depIdxs,
		MessageInfos:      file_internal_messaging_telemetry_proto_msgTypes,
	}.Build()
	File_internal_messaging_telemetry_proto = out.File
	file_internal_messaging_telemetry_proto_goTypes = nil
	file_internal_messaging_telemetry_proto_depIdxs = nil
}
